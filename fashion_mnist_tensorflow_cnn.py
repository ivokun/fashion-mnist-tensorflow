# -*- coding: utf-8 -*-
"""fashion-mnist-tensorflow-cnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o_8lMv4jBnYIwOVeGu106k_J1lc5-F7y
"""

import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import StratifiedShuffleSplit
from keras import backend as k

import numpy as np
import matplotlib.pyplot as plt

tf.VERSION

config = tf.ConfigProto()
config.gpu_options.allow_growth = True
tf.Session(config=config)

(imageTrain, labelTrain), (imageTest, labelTest) = tf.keras.datasets.fashion_mnist.load_data()

plt.figure()
plt.imshow(imageTrain[0])
plt.grid(False)

labels = {0 : "T-shirt/top", 1: "Trouser", 2: "Pullover", 3: "Dress", 4: "Coat", 5: "Sandal", 6: "Shirt", 7: "Sneaker", 8: "Bag", 9: "Ankle Boot"}

imageTrain = np.expand_dims(imageTrain, -1)
imageTest = np.expand_dims(imageTest, -1)

sss = StratifiedShuffleSplit(n_splits=5, random_state=0, test_size=1/6)
trainIndex, validIndex = next(sss.split(imageTrain, labelTrain))
imageValid, labelValid = imageTrain[validIndex], labelTrain[validIndex]
imageTrain, labelTrain = imageTrain[trainIndex], labelTrain[trainIndex]

labelTrain = keras.utils.to_categorical(labelTrain)
labelValid = keras.utils.to_categorical(labelValid)
labelTest = keras.utils.to_categorical(labelTest)

print("Fashion MNIST train -       rows: ", imageTrain.shape[0]," columns:", imageTrain.shape[1:4])
print("Fashion MNIST validation -  rows: ", imageValid.shape[0]," columns:", imageValid.shape[1:4])
print("Fashion MNIST test -        rows: ", imageTest.shape[0]," columns:", imageTest.shape[1:4])

"""# Perform Mean Subtraction and Normalization"""

def dataPreProcessing(data):
    data = data / 255

    meanSubt = np.mean(data)
    stdDev = np.std(data)

    data = data - meanSubt
    data = data / stdDev

    return data

"""# Parameters

Initializer parameter
*   **glorot_normal** for Xavier initialization
*   **he_normal** for He initialization
"""

initializerParam = "he_normal"

"""Activation function:


*   **relu** for ReLU
*   **selu** for SELU
"""

activationParam = keras.activations.relu

"""Optimizer parameter:


*   **keras.optimizers.Adam()** for ADAM optimizer
*   **keras.optimizers.Adagrad()** for Adagrad optimizer
*   **keras.optimizers.RMSprop()** for RMSProp optimizer
*   **keras.optimizers.Adadelta()** for AdadeltaOptimizer()
"""

optimizerParam =  keras.optimizers.Adam()

"""Filter size parameter:"""

filterSizeParam = 64

"""#Initiate Model"""

fashionModel = keras.Sequential()
fashionModel.add(keras.layers.Conv2D(filterSizeParam, kernel_size=(3,3), kernel_initializer = initializerParam, padding='same', activation = activationParam, kernel_regularizer=keras.regularizers.l2(0.001), input_shape=imageTrain.shape[1:]))
fashionModel.add(keras.layers.MaxPooling2D(2,2))
fashionModel.add(keras.layers.Conv2D(filterSizeParam*2, kernel_size=(3,3), padding='same', activation = activationParam, kernel_regularizer=keras.regularizers.l2(0.001)))
fashionModel.add(keras.layers.MaxPooling2D(2,2))
fashionModel.add(keras.layers.Conv2D(filterSizeParam*3, kernel_size=(3,3), padding='same', activation = activationParam, kernel_regularizer=keras.regularizers.l2(0.001)))
fashionModel.add(keras.layers.MaxPooling2D(2,2))
fashionModel.add(keras.layers.Flatten())
fashionModel.add(keras.layers.Dense(filterSizeParam*4, activation = activationParam, kernel_regularizer=keras.regularizers.l2(0.001)))
fashionModel.add(keras.layers.Dense(10, activation='softmax'))
fashionModel.compile(optimizer= optimizerParam, loss='categorical_crossentropy',metrics=['accuracy'])
fashionModel.summary()

fashionTraining = fashionModel.fit(imageTrain, labelTrain, epochs=10, verbose=1, validation_data=(imageValid, labelValid))

test_loss, test_acc = fashionModel.evaluate(imageTest, labelTest)

print('Test accuracy:', test_acc)
print('Test loss:', test_loss)

validLoss, validAccuracy = fashionModel.evaluate(imageValid, labelValid)

print('Valid Accuracy:', validAccuracy)
print('Valid Loss:', validLoss)

print("Accuracy:", fashionTraining.history['acc'][9])
print("Loss:", fashionTraining.history['loss'][9])
print("Validation Accuracy:", fashionTraining.history['val_acc'][9])
print("Validation Loss:", fashionTraining.history['val_loss'][9])
print("Test Accuracy:", test_acc)
print("Test Loss:", test_loss)

"""***To save model to google drive, make sure run below code and enter your authorization code.***

![alt text](https://cdn-images-1.medium.com/max/1000/1*4AJ2EEn-xtvGAiwsNlDmNQ.png)
"""

fashionModel.save('drive/My Drive/Master Life/cnn_fmnist_L2.h5')